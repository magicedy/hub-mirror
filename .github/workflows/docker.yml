name: docker

on:
  workflow_dispatch:
  # schedule:
  #   - cron: '0 0 * * *' # 每天早上0点

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io

jobs:
  mirror:
    name: Mirror ${{ matrix.image }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: 
           - "gitea/gitea:latest"
           - "gitea/act_runner:latest"
#           - "headscale/headscale:latest"
           - "xhofe/alist:latest"
           - "mysql:8"
           - "redis:6.2-alpine"
           - "tensorchord/pgvecto-rs:pg14-v0.2.0"
           - "willfarrell/autoheal:latest"
           - "unityci/editor:2021.3.38f1-windows-mono-3"
           - "unityci/editor:2021.3.38f1-android-3"
           - "unityci/editor:2021.3.38f1-webgl-3"
           - "unityci/editor:2022.3.14f1-windows-mono-3"
           - "unityci/editor:2022.3.14f1-android-3"
           - "unityci/editor:2022.3.14f1-webgl-3"

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Mirror
      - name: Mirror ${{ matrix.image }} to ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.image }}
        run: |
          # docker login -u ${{ github.repository_owner }} -p ${{ secrets.GITHUB_TOKEN }} ${{ env.REGISTRY }}
          image="${{ matrix.image }}"
          image_mirror="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.image }}"
          docker manifest inspect $image
          platforms=($(docker manifest inspect $image | jq -r '.manifests[] | select(.platform.os == "linux") | select(.platform.architecture != "unknown") | "\(.platform.architecture)|\(.platform.os)|\(.platform.variant)"'))
          echo "platforms: ${platforms[@]}"
          platform_manifests=()
          for platform in "${platforms[@]}"; do
            IFS='|' read -ra arr <<< "$platform"
            architecture=${arr[0]}
            os=${arr[1]}
            variant=${arr[2]}
            if [ "$variant" == "null" ] || [ "$variant" == "" ]; then
              echo "os: $os, architecture: $architecture"
              docker pull --platform $os/$architecture $image
              docker tag $image $image_mirror-$os-$architecture
              docker push $image_mirror-$os-$architecture
              platform_manifests+=("$image_mirror-$os-$architecture")
            else
              echo "os: $os, architecture: $architecture, variant: $variant"
              docker pull --platform $os/$architecture/$variant $image
              docker tag $image $image_mirror-$os-$architecture-$variant
              docker push $image_mirror-$os-$architecture-$variant
              platform_manifests+=("$image_mirror-$os-$architecture-$variant")
            fi
          done
          docker manifest create $image_mirror ${platform_manifests[@]}
          docker manifest push $image_mirror
